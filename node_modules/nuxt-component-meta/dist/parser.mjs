import { mkdir, unlink, writeFile, readFile } from 'fs/promises';
import { performance } from 'perf_hooks';
import { existsSync } from 'fs';
import { join, relative, dirname } from 'pathe';
import { logger } from '@nuxt/kit';
import { createCheckerByJson } from 'vue-component-meta';
import { resolvePathSync } from 'mlly';

function useComponentMetaParser({
  outputDir = join(process.cwd(), ".component-meta/"),
  rootDir = process.cwd(),
  components: _components = [],
  componentDirs = [],
  checkerOptions,
  exclude = [],
  transformers = [],
  debug = false,
  metaFields,
  metaSources = {}
}) {
  const outputPath = join(outputDir, "component-meta");
  const isExcluded = (component) => {
    return exclude.find((excludeRule) => {
      switch (typeof excludeRule) {
        case "string":
          return component.filePath.includes(excludeRule);
        case "object":
          return excludeRule instanceof RegExp ? excludeRule.test(component.filePath) : false;
        case "function":
          return excludeRule(component);
        default:
          return false;
      }
    });
  };
  const components = { ...metaSources };
  for (const component of _components || []) {
    if (isExcluded(component)) {
      continue;
    }
    if (!component.filePath || !component.pascalName) {
      continue;
    }
    const filePath = resolvePathSync(component.filePath);
    components[component.pascalName] = {
      ...component,
      fullPath: filePath,
      filePath: relative(rootDir, filePath),
      meta: {
        type: 0,
        props: [],
        slots: [],
        events: [],
        exposed: []
      }
    };
  }
  const getStringifiedComponents = () => {
    const _components2 = Object.keys(components).map((key) => [
      key,
      {
        ...components[key],
        fullPath: void 0,
        shortPath: void 0,
        export: void 0
      }
    ]);
    return JSON.stringify(Object.fromEntries(_components2), null, 2);
  };
  const getVirtualModuleContent = () => `export default ${getStringifiedComponents()}`;
  let checker;
  const refreshChecker = () => {
    checker = createCheckerByJson(
      rootDir,
      {
        extends: `${rootDir}/tsconfig.json`,
        skipLibCheck: true,
        include: [
          "**/*",
          ...componentDirs.map((dir) => {
            const path = typeof dir === "string" ? dir : dir?.path || "";
            if (path.endsWith(".vue")) {
              return path;
            }
            return `${path}/**/*`;
          })
        ],
        exclude: []
      },
      checkerOptions
    );
  };
  const updateOutput = async (content) => {
    const path = outputPath + ".mjs";
    if (!existsSync(dirname(path))) {
      await mkdir(dirname(path), { recursive: true });
    }
    if (existsSync(path)) {
      await unlink(path);
    }
    await writeFile(
      path,
      content || getVirtualModuleContent(),
      "utf-8"
    );
  };
  const stubOutput = async () => {
    if (existsSync(outputPath + ".mjs")) {
      return;
    }
    await updateOutput("export default {}");
  };
  const fetchComponent = async (component) => {
    if (!checker) {
      try {
        refreshChecker();
      } catch (e) {
        return;
      }
    }
    const startTime = performance.now();
    try {
      if (typeof component === "string") {
        if (components[component]) {
          component = components[component];
        } else {
          component = Object.entries(components).find(([, comp]) => comp.fullPath === component);
          if (!component) {
            return;
          }
          component = component[1];
        }
      }
      if (!component?.fullPath || !component?.pascalName) {
        return;
      }
      if (transformers && transformers.length > 0) {
        let code = await readFile(component.fullPath, "utf-8");
        for (const transform of transformers) {
          const transformResult = transform(component, code);
          component = transformResult?.component || component;
          code = transformResult?.code || code;
        }
        checker.updateFile(component.fullPath, code);
      }
      const { type, props, slots, events, exposed } = checker.getComponentMeta(component.fullPath);
      component.meta.type = metaFields.type ? type : 0;
      component.meta.slots = metaFields.slots ? slots : [];
      component.meta.events = metaFields.events ? events : [];
      component.meta.exposed = metaFields.exposed ? exposed : [];
      component.meta.props = (metaFields.props ? props : []).filter((prop) => !prop.global).sort((a, b) => {
        if (!a.required && b.required) {
          return 1;
        }
        if (a.required && !b.required) {
          return -1;
        }
        if (a.type === "boolean" && b.type !== "boolean") {
          return 1;
        }
        if (a.type !== "boolean" && b.type === "boolean") {
          return -1;
        }
        return 0;
      });
      component.meta.props = component.meta.props.map((sch) => stripeTypeScriptInternalTypesSchema(sch, true));
      component.meta.slots = component.meta.slots.map((sch) => stripeTypeScriptInternalTypesSchema(sch, true));
      component.meta.exposed = component.meta.exposed.map((sch) => stripeTypeScriptInternalTypesSchema(sch, true));
      component.meta.events = component.meta.events.map((sch) => stripeTypeScriptInternalTypesSchema(sch, true));
      removeFields(component.meta, ["declarations"]);
      components[component.pascalName] = component;
    } catch (e) {
      debug && logger.info(`Could not parse ${component?.pascalName || component?.filePath || "a component"}!`);
    }
    const endTime = performance.now();
    if (debug === 2) {
      logger.success(`${component?.pascalName || component?.filePath || "a component"} metas parsed in ${(endTime - startTime).toFixed(2)}ms`);
    }
  };
  const fetchComponents = async () => {
    const startTime = performance.now();
    await Promise.all(Object.values(components).map(fetchComponent));
    const endTime = performance.now();
    if (!debug || debug === 2) {
      logger.success(`Components metas parsed in ${(endTime - startTime).toFixed(2)}ms`);
    }
  };
  return {
    get checker() {
      return checker;
    },
    get components() {
      return components;
    },
    refreshChecker,
    stubOutput,
    outputPath,
    updateOutput,
    fetchComponent,
    fetchComponents,
    getStringifiedComponents,
    getVirtualModuleContent
  };
}
function removeFields(obj, fieldsToRemove) {
  if (obj && typeof obj === "object") {
    for (const key in obj) {
      if (fieldsToRemove.includes(key)) {
        delete obj[key];
      } else if (typeof obj[key] === "object") {
        removeFields(obj[key], fieldsToRemove);
      }
    }
  }
  return obj;
}
function stripeTypeScriptInternalTypesSchema(type, topLevel = true) {
  if (!type) {
    return type;
  }
  if (!topLevel && type.declarations && type.declarations.find((d) => d.file.includes("node_modules/typescript") || d.file.includes("@vue/runtime-core"))) {
    return false;
  }
  if (Array.isArray(type)) {
    return type.map((sch) => stripeTypeScriptInternalTypesSchema(sch, false)).filter((r) => r !== false);
  }
  if (Array.isArray(type.schema)) {
    return {
      ...type,
      declarations: void 0,
      schema: type.schema.map((sch) => stripeTypeScriptInternalTypesSchema(sch, false)).filter((r) => r !== false)
    };
  }
  if (!type.schema || typeof type.schema !== "object") {
    return typeof type === "object" ? { ...type, declarations: void 0 } : type;
  }
  const schema = {};
  Object.keys(type.schema).forEach((sch) => {
    if (sch === "schema" && type.schema[sch]) {
      schema[sch] = schema[sch] || {};
      Object.keys(type.schema[sch]).forEach((sch2) => {
        const res2 = stripeTypeScriptInternalTypesSchema(type.schema[sch][sch2], false);
        if (res2 !== false) {
          schema[sch][sch2] = res2;
        }
      });
      return;
    }
    const res = stripeTypeScriptInternalTypesSchema(type.schema[sch], false);
    if (res !== false) {
      schema[sch] = res;
    }
  });
  return {
    ...type,
    declarations: void 0,
    schema
  };
}

export { useComponentMetaParser };
